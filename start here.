import re
import os
import base64
import hashlib
import bcrypt
import sqlite3
from sqlite3 import Connection
from datetime import datetime
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
from cryptography.fernet import Fernet
from getpass import getpass
import bip32utils

# Email Validation Function
def validate_email(email: str) -> bool:
    """
    Validate the email address using regex.
    """
    pattern = r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
    return re.match(pattern, email) is not None

# Encryption and Decryption Class
class WalletSecurity:
    def __init__(self, user_key: str):
        self.user_key = user_key
        self.fernet_key = self._generate_secure_key()

    def _generate_secure_key(self):
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=os.urandom(16),
            iterations=100000,
            backend=default_backend()
        )
        return Fernet(base64.urlsafe_b64encode(kdf.derive(self.user_key.encode())))

    def encrypt(self, data: str) -> str:
        return self.fernet_key.encrypt(data.encode()).decode()

    def decrypt(self, data: str) -> str:
        return self.fernet_key.decrypt(data.encode()).decode()

# Wallet Management Class
class WalletManager:
    def __init__(self, seed: str):
        self.seed = seed
        self.hd_master_key = bip32utils.BIP32Key.fromEntropy(self.seed.encode())
        self._fiat_balances = {}
        self._crypto_balances = {}

    def create_wallet(self, email: str):
        hashed_email = hashlib.sha256(email.encode()).digest()
        child_key = self.hd_master_key.ChildKey(0).ChildKey(int.from_bytes(hashed_email[:4], 'big'))
        wallet_address = child_key.Address()
        return wallet_address

    def update_fiat_balance(self, user_id: str, amount: float):
        if user_id not in self._fiat_balances:
            self._fiat_balances[user_id] = 0
        self._fiat_balances[user_id] += amount

    def get_fiat_balance(self, user_id: str):
        return self._fiat_balances.get(user_id, 0)

# User Management Class
class UserManager:
    def __init__(self, db_conn: Connection):
        self.conn = db_conn
        self.create_table()

    def create_table(self):
        self.conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                username TEXT PRIMARY KEY,
                password TEXT NOT NULL,
                email TEXT NOT NULL,
                owner_key TEXT NOT NULL,
                wallet_address TEXT NOT NULL,
                created_at TEXT NOT NULL,
                updated_at TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def register_user(self, username: str, password: str, email: str, wallet_manager: WalletManager):
        cursor = self.conn.cursor()

        # Validate email
        if not validate_email(email):
            raise Exception("Invalid email format!")

        # Check if user already exists
        cursor.execute("SELECT * FROM users WHERE username=?", (username,))
        if cursor.fetchone():
            raise Exception("User already exists!")

        # Hash Password with bcrypt
        salt = bcrypt.gensalt()
        hashed_password = bcrypt.hashpw(password.encode(), salt).decode()

        # Generate owner's key based on email
        owner_key = hashlib.sha256(email.encode()).hexdigest()

        # Create Wallet
        wallet_address = wallet_manager.create_wallet(email)

        # Timestamps
        timestamp = datetime.now().isoformat()

        # Store User Data
        cursor.execute('''
            INSERT INTO users (username, password, email, owner_key, wallet_address, created_at, updated_at)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (username, hashed_password, email, owner_key, wallet_address, timestamp, timestamp))

        self.conn.commit()

        return owner_key, wallet_address
    
    def login_user(self, username: str, password: str):
        cursor = self.conn.cursor()
        cursor.execute("SELECT * FROM users WHERE username=?", (username,))
        user_data = cursor.fetchone()
        if not user_data:
            raise Exception("User doesn't exist!")

        stored_password = user_data[1]
        if not bcrypt.checkpw(password.encode(), stored_password.encode()):
            raise Exception("Incorrect password!")

        return True


def main():
    # Initialize database connection
    conn = sqlite3.connect('users.db')
    user_manager = UserManager(conn)
    seed = 'random_seed_for_wallet'
    wallet_manager = WalletManager(seed)

    print("Welcome! Please choose one of the following options:")
    print("1. Register")
    print("2. Login")
    choice = input("Enter 1 or 2: ").strip()

    if choice == "1":
        # User Registration
        print("\n--- User Registration ---")
        username = input("Username: ")
        password = getpass("Password: ")
        email = input("Email: ").strip()

        try:
            owner_key, wallet_address = user_manager.register_user(username, password, email, wallet_manager)
            print(f"Registration Successful! Owner Key: {owner_key}, Wallet Address: {wallet_address}")
        except Exception as e:
            print(f"Registration Failed: {e}")

    elif choice == "2":
        # User Login
        print("\n--- User Login ---")
        username = input("Username: ")
        password = getpass("Password: ")

        try:
            if user_manager.login_user(username, password):
                print("Login Successful!")
        except Exception as e:
            print(f"Login Failed: {e}")

    else:
        print("Invalid choice! Please enter 1 or 2.")

    # Close database connection
    conn.close()

if __name__ == "__main__":
    main()
